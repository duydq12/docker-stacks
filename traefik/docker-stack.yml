# =========================================
# Traefik
# Verion 2.4.x
#
# This file can be used to setup a Traefik proxy on a Docker Swarm with replication.
#
# It expects one or more virtual machines to be part of the swarm. There is a constraint to make sure that each Traefik proxy runs on a
# particular host with label `node-has-traefik=true`.
# Run `docker stack deploy <stackname> -c docker-stack.yml` on the Swarm leader to start the cluster.
#
# Requires:
# - Docker Engine 17.12.0+
# - Docker Compose 1.18.0+
# =========================================

version: "3.5"

# Networks
networks:
  # Use the previously created public network "reverse-proxy", shared with other
  # services that need to be publicly available via this Traefik
  proxy-net:
    name: reverse-proxy
    external: true

# Secrets
secrets:
  linode-token:
    name: linode-token
    external: true

# Volumes
volumes:
  # Use the previously created volume "certs-vol" to store the certificates, there is a constraint to make sure
  # Traefik is always deployed to the same Docker node with the same volume containing
  # the HTTPS certificates
  certs-vol:
    name: certs-vol
    external: true

# Services
services:
  proxy:
    image: traefik:v2.6
    command:
      # Enable Docker provider in Traefik, so that it reads labels from Docker services.
      # Do not expose all Docker services, only the ones explicitly exposed:
      # Services in `reverse-proxy` networks and have label `traefik.constraint-label=traefik-public`
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=reverse-proxy
      - --providers.docker.constraints=Label(`traefik.constraint-label`, `traefik-public`)
      # Enable Docker Swarm mode (optional)
      - --providers.docker.swarmMode=true

      # Using Let's Encrypt as certificates resolver
      - --certificatesresolvers.le.acme.email=${EMAIL:?Variable not set}
      - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      - --certificatesResolvers.le.acme.keyType=RSA4096
      # For debug acme
      # - --certificatesresolvers.le.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
      # Use the TLS Challenge
      # - --certificatesresolvers.le.acme.tlschallenge=true
      # Use the DNS Challenge with Linode Provider
      - --certificatesresolvers.le.acme.dnschallenge.provider=linode
      - --certificatesresolvers.le.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53

      # Create two entrypoints `web` listening on port 80 and `websecure` listening on port 443.
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      # Redirect all traffic coming in at port 80 to port 443
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      - --entrypoints.web.http.redirections.entrypoint.priority=10
      # Setting up middlewares and tls for port 443
      - --entrypoints.websecure.http.middlewares=compress@docker
      - --entrypoints.websecure.http.tls=true
      - --entrypoints.websecure.http.tls.certResolver=le
      - --entrypoints.websecure.http.tls.domains[0].main=${DOMAIN:?Variable not set}
      - --entrypoints.websecure.http.tls.domains[0].sans=*.${DOMAIN:?Variable not set}

      # Enable the access log, with HTTP requests
      - --accesslog=true

      # Enable the Traefik log, for configurations and errors
      - --log.level=WARN

      # Enable the Dashboard and API
      - --api.dashboard=true
      # - --api.debug=true

      # Enable ping
      - --ping=true
      - --ping.manualrouting=true

      # Enable metrics
      - --metrics=true
      - --metrics.prometheus=true
      - --metrics.prometheus.addEntryPointsLabels=true
      - --metrics.prometheus.addServicesLabels=true
      - --metrics.prometheus.manualrouting=true

      # Misc
      - --experimental.plugins.fail2ban.modulename=github.com/tommoulard/fail2ban
      - --experimental.plugins.fail2ban.version=v0.6.2
      - --global.checknewversion=false
      - --global.sendanonymoususage=false
      - --pilot.token=${TRAEFIK_PILOT_TOKEN}
    deploy:
      placement:
        constraints:
          # Make the traefik service run only on the node with this label
          # as the node with it has the volume for the certificates
          - node.labels.node-has-traefik == true

      labels:
        # Enable Traefik for this service
        - traefik.enable=true
        - traefik.constraint-label=traefik-public

        # Setting middlewares
        - traefik.http.middlewares.admin-auth.basicauth.users=${USERNAME:?Variable not set}:${HASHED_PASSWORD:?Variable not set}
        - traefik.http.middlewares.internal-ips.ipwhitelist.sourceRange=127.0.0.0/8,10.0.0.0/8,192.168.0.0/16,172.16.0.0/16
        - traefik.http.middlewares.compress.compress=true

        # Setup Traefik API anf Web UI/Dashboard using the special Traefik service api@internal
        - traefik.http.routers.traefik-api.entrypoints=websecure
        # - traefik.http.routers.traefik-api.rule=Host(`traefik.${DOMAIN:?Variable not set}`)
        - traefik.http.routers.traefik-api.rule=Host(`traefik.${DOMAIN:?Variable not set}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`) || PathPrefix(`/debug`))
        - traefik.http.routers.traefik-api.middlewares=internal-ips@docker,admin-auth@docker
        - traefik.http.routers.traefik-api.service=api@internal
        - traefik.http.routers.traefik-api.priority=10
        - traefik.http.services.traefik-api-svc.loadbalancer.server.port=8080

        # Setup Traefik ping using the special Traefik service ping@internal
        - traefik.http.routers.traefik-ping.entrypoints=websecure
        - traefik.http.routers.traefik-ping.rule=Host(`traefik.${DOMAIN:?Variable not set}`) && PathPrefix(`/ping`)
        - traefik.http.routers.traefik-ping.middlewares=internal-ips@docker,admin-auth@docker
        - traefik.http.routers.traefik-ping.service=ping@internal
        - traefik.http.routers.traefik-ping.priority=15
        - traefik.http.services.traefik-ping.loadbalancer.server.port=8080

        # Handle metrics requests
        - traefik.http.routers.traefik-metrics.entrypoints=websecure
        - traefik.http.routers.traefik-metrics.rule=Host(`traefik.${DOMAIN:?Variable not set}`) && PathPrefix(`/metrics`)
        - traefik.http.routers.traefik-metrics.middlewares=internal-ips@docker,admin-auth@docker
        - traefik.http.routers.traefik-metrics.service=prometheus@internal
        - traefik.http.routers.traefik-metrics.priority=20
        - traefik.http.services.traefik-metrics.loadbalancer.server.port=8080

    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      - proxy-net

    environment:
      - LINODE_TOKEN_FILE=/run/secrets/linode-token

    ports:
      # Listen on port 80, default for HTTP, necessary to redirect to HTTPS
      - target: 80
        published: 80
        mode: host

      # Listen on port 443, default for HTTPS
      - target: 443
        published: 443
        mode: host

    secrets:
      - linode-token

    volumes:
      - certs-vol:/certificates
      - /var/run/docker.sock:/var/run/docker.sock:ro
