# =========================================
# Treafik
# Reverse proxy with automatic TLS certificate generation
#
# Requires:
# - Docker Engine 19.03.0+
# - Docker Compose 1.27.0+
# =========================================

networks:
  # Use the previously created public network "reverse-proxy", shared with other
  # services that need to be publicly available via this Traefik
  proxy-net:
    name: reverse-proxy
    external: true

volumes:
  # Use the previously created volume "certs-vol" to store the certificates, there is a constraint to make sure
  # Traefik is always deployed to the same Docker node with the same volume containing
  # the HTTPS certificates
  certs-vol:
    name: certs-vol
    external: true

services:
  proxy:
    image: traefik:v2.9
    container_name: traefik
    environment:
      # Enable the Dashboard and API
      - TRAEFIK_API_DASHBOARd=true
      # - TRAEFIK_API_DEBUG=false
      - TRAEFIK_API_INSECURE=false

      # Using Let's Encrypt as certificates resolver
      - TRAEFIK_CERTIFICATESRESOLVERS_le=true
      - TRAEFIK_CERTIFICATESRESOLVERS_le_ACME_EMAIL=${EMAIL:?Variable not set}
      - TRAEFIK_CERTIFICATESRESOLVERS_le_ACME_KEYTYPE=RSA4096
      - TRAEFIK_CERTIFICATESRESOLVERS_le_ACME_STORAGE=/certificates/acme.json
      # For debug acme
      - TRAEFIK_CERTIFICATESRESOLVERS_le_ACME_CASERVER=https://acme-staging-v02.api.letsencrypt.org/directory
      # Use the DNS Challenge with Linode Provider
      - TRAEFIK_CERTIFICATESRESOLVERS_le_ACME_DNSCHALLENGE=true
      - TRAEFIK_CERTIFICATESRESOLVERS_le_ACME_DNSCHALLENGE_PROVIDER=linode
      - TRAEFIK_CERTIFICATESRESOLVERS_le_ACME_DNSCHALLENGE_RESOLVERS=1.1.1.1:53,8.8.8.8:53
      # Use the TLS Challenge
      # - TRAEFIK_CERTIFICATESRESOLVERS_le_ACME_TLSCHALLENGE=true
      # Use the HTTP Challenge
      # - TRAEFIK_CERTIFICATESRESOLVERS_le_ACME_HTTPCHALLENGE=true

      # Create two entrypoints `web` listening on port 80 and `websecure` listening on port 443.
      - TRAEFIK_ENTRYPOINTS_web_ADDRESS=:80
      - TRAEFIK_ENTRYPOINTS_websecure_ADDRESS=:443
      - TRAEFIK_ENTRYPOINTS_traefik_ADDRESS=:8080
      # Redirect all traffic coming in at port 80 to port 443
      - TRAEFIK_ENTRYPOINTS_web_HTTP_REDIRECTIONS_ENTRYPOINT_PERMANENT=true
      - TRAEFIK_ENTRYPOINTS_web_HTTP_REDIRECTIONS_ENTRYPOINT_PRIORITY=10
      - TRAEFIK_ENTRYPOINTS_web_HTTP_REDIRECTIONS_ENTRYPOINT_SCHEME=https
      - TRAEFIK_ENTRYPOINTS_web_HTTP_REDIRECTIONS_ENTRYPOINT_TO=websecure
      # Setting up middlewares and tls for port 443
      - TRAEFIK_ENTRYPOINTS_websecure_HTTP_TLS=true
      - TRAEFIK_ENTRYPOINTS_websecure_HTTP_TLS_CERTRESOLVER=le
      - TRAEFIK_ENTRYPOINTS_websecure_HTTP_TLS_DOMAINS_0_MAIN="${DOMAIN:?Variable not set}"
      - TRAEFIK_ENTRYPOINTS_websecure_HTTP_TLS_DOMAINS_0_SANS="*.${DOMAIN:?Variable not set}"

      # Misc
      - TRAEFIK_GLOBAL_CHECKNEWVERSION=false
      - TRAEFIK_GLOBAL_SENDANONYMOUSUSAGE=false

      # Enable the access log, with HTTP requests
      # - TRAEFIK_ACCESSLOG=true

      # Enable the Traefik log, for configurations and errors
      - TRAEFIK_LOG=true
      - TRAEFIK_LOG_LEVEL=INFO

      # Enable metrics
      - TRAEFIK_METRICS=true
      - TRAEFIK_METRICS_PROMETHEUS=true
      - TRAEFIK_METRICS_PROMETHEUS_ADDENTRYPOINTSLABELS=true
      - TRAEFIK_METRICS_PROMETHEUS_ADDSERVICESLABELS=true
      - TRAEFIK_METRICS_PROMETHEUS_ENTRYPOINT=traefik
      # - TRAEFIK_METRICS_PROMETHEUS_MANUALROUTING=true

      # Enable ping
      - TRAEFIK_PING=1
      - TRAEFIK_PING_ENTRYPOINT=traefik
      # - TRAEFIK_PING_MANUALROUTING=true

      # Tracing
      # - TRAEFIK_TRACING=true

      # Enable Docker provider in Traefik, so that it reads labels from Docker services.
      # Do not expose all Docker services, only the ones explicitly exposed:
      # Services in `reverse-proxy` networks and have label `traefik.constraint-label=traefik-public`
      - TRAEFIK_PROVIDERS_DOCKER=true
      - TRAEFIK_PROVIDERS_DOCKER_EXPOSEDBYDEFAULT=false
      - TRAEFIK_PROVIDERS_DOCKER_NETWORK=reverse-proxy
      - TRAEFIK_PROVIDERS_DOCKER_CONSTRAINTS=Label(`traefik.constraint-label`, `traefik-public`)
      # - TRAEFIK_PROVIDERS_DOCKER_ENDPOINT=unix:///var/run/docker.sock
    labels:
      # Enable Traefik for this service
      traefik.enable: true
      traefik.constraint-label: traefik-public

      # Setting middlewares
      traefik.http.middlewares.internal-ips.ipwhitelist.sourceRange: 127.0.0.0/8,10.0.0.0/8,192.168.0.0/16,172.16.0.0/16
      traefik.http.middlewares.compress.compress: true

      # Setup Traefik API anf Web UI/Dashboard using the special Traefik service api@internal
      traefik.http.routers.traefik-api.entrypoints: websecure
      traefik.http.routers.traefik-api.rule: Host(`traefik.${DOMAIN:?Variable not set}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`) || PathPrefix(`/debug`))
      traefik.http.routers.traefik-api.middlewares: internal-ips@docker,compress@docker
      traefik.http.routers.traefik-api.service: api@internal
      traefik.http.routers.traefik-api.priority: 10

      # # If use manual routing for Traefik Ping service, please uncomment this blow block
      # traefik.http.routers.traefik-ping.entrypoints: websecure
      # traefik.http.routers.traefik-ping.rule: Host(`traefik.${DOMAIN:?Variable not set}`) && PathPrefix(`/ping`)
      # # traefik.http.routers.traefik-ping.middlewares: internal-ips@docker
      # traefik.http.routers.traefik-ping.service: ping@internal
      # traefik.http.routers.traefik-ping.priority: 15

      # # If use manual routing for Traefik Metrics service, please uncomment this blow block
      # traefik.http.routers.traefik-metrics.entrypoints: websecure
      # traefik.http.routers.traefik-metrics.rule: Host(`traefik.${DOMAIN:?Variable not set}`) && PathPrefix(`/metrics`)
      # # traefik.http.routers.traefik-metrics.middlewares: internal-ips@docker
      # traefik.http.routers.traefik-metrics.service: prometheus@internal
      # traefik.http.routers.traefik-metrics.priority: 20

    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      - proxy-net

    ports:
      # Listen on port 80, default for HTTP, necessary to redirect to HTTPS
      - 80:80

      # Listen on port 443, default for HTTPS
      - 443:443

    restart: unless-stopped
    volumes:
      - certs-vol:/certificates
      - /var/run/docker.sock:/var/run/docker.sock:ro

    healthcheck:
      test: ["CMD", "traefik", "healthcheck"]
      start_period: 20s
      interval: 5s
      timeout: 5s
      retries: 5
